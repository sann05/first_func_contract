#include "imports/stdlib.fc";

const const:min_tons_for_storage = 10000000; ;; 0.01 TON

(int, slice, slice) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_uint(32), ;; counter value
        ds~load_msg_addr(), ;; the last sender address
        ds~load_msg_addr() ;; owner address
    );
}

() save_data(int counter, slice sender_address, slice owner_address) impure inline {
    set_data(begin_cell()
        .store_uint(counter, 32) ;; counter value
        .store_slice(sender_address) ;; the last sender address
        .store_slice(owner_address) ;; owner address
        .end_cell()
    );
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);

    var (counter, last_sender, owner_address) = load_data();

    if (op == 1) {
        int increment_by = in_msg_body~load_uint(32);
        save_data(
            counter + increment_by,
            sender_address,
            owner_address
        );
        return();
    }

    if (op == 2) {
        return();
    }

    if (op == 3) {
        throw_unless(103, equal_slice_bits(sender_address, owner_address));
        int withdraw_amount = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        throw_unless(104, balance >= withdraw_amount);

        int return_value = min(withdraw_amount, balance - const:min_tons_for_storage);

        ;; send internal message
        var msg = begin_cell()
            .store_uint(0x18, 6) ;; shortcut
            .store_slice(owner_address) ;; destination address
            ;; Serialize currency collections
            .store_coins(return_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
        
        send_raw_message(
            msg.end_cell(),
            0 + 1 ;; message mode:  0 - ordinary, +1 want to pay transaction fees separately
        );
        return();
    }

    if (op == 4) { ;; destroy contract
        throw_unless(104, equal_slice_bits(sender_address, owner_address));

        var msg = begin_cell()
            .store_uint(0x18, 6) ;; shortcut
            .store_slice(owner_address) ;; destination address
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

        send_raw_message(
            msg.end_cell(),
            128 + 32
        );
        return();
    }

    throw(777);

}


(int, slice, slice) get_contract_storage_data() method_id {
    var (counter, last_sender, owner_address) = load_data();
    return (counter, last_sender, owner_address);
}


(int) balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}